{"version":3,"file":"Throttler.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Throttler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nexport type FinishCallback = (err: Error) => void;\n\nexport class Throttler {\n  private readonly timeout: number;\n  private isRunningProcess: boolean;\n  private asSoonAsPossible: boolean;\n  private process: (() => (Promise<unknown>))|null;\n  private lastCompleteTime: number;\n  private schedulePromise: Promise<unknown>;\n  private scheduleResolve!: (value: unknown) => void;\n  private processTimeout?: number;\n\n  constructor(timeout: number) {\n    this.timeout = timeout;\n    this.isRunningProcess = false;\n    this.asSoonAsPossible = false;\n    this.process = null;\n    this.lastCompleteTime = 0;\n\n    this.schedulePromise = new Promise(fulfill => {\n      this.scheduleResolve = fulfill;\n    });\n  }\n\n  _processCompleted(): void {\n    this.lastCompleteTime = this._getTime();\n    this.isRunningProcess = false;\n    if (this.process) {\n      this._innerSchedule(false);\n    }\n    this._processCompletedForTests();\n  }\n\n  _processCompletedForTests(): void {\n    // For sniffing in tests.\n  }\n\n  _onTimeout(): void {\n    delete this.processTimeout;\n    this.asSoonAsPossible = false;\n    this.isRunningProcess = true;\n\n    Promise.resolve()\n        .then(this.process)\n        .catch(console.error.bind(console))\n        .then(this._processCompleted.bind(this))\n        .then(this.scheduleResolve);\n    this.schedulePromise = new Promise(fulfill => {\n      this.scheduleResolve = fulfill;\n    });\n    this.process = null;\n  }\n\n  schedule(process: () => (Promise<unknown>), asSoonAsPossible?: boolean): Promise<void> {\n    // Deliberately skip previous process.\n    this.process = process;\n\n    // Run the first scheduled task instantly.\n    const hasScheduledTasks = Boolean(this.processTimeout) || this.isRunningProcess;\n    const okToFire = this._getTime() - this.lastCompleteTime > this.timeout;\n    asSoonAsPossible = Boolean(asSoonAsPossible) || (!hasScheduledTasks && okToFire);\n\n    const forceTimerUpdate = asSoonAsPossible && !this.asSoonAsPossible;\n    this.asSoonAsPossible = this.asSoonAsPossible || asSoonAsPossible;\n\n    this._innerSchedule(forceTimerUpdate);\n\n    return this.schedulePromise as Promise<void>;\n  }\n\n  _innerSchedule(forceTimerUpdate: boolean): void {\n    if (this.isRunningProcess) {\n      return;\n    }\n    if (this.processTimeout && !forceTimerUpdate) {\n      return;\n    }\n    if (this.processTimeout) {\n      this._clearTimeout(this.processTimeout);\n    }\n\n    const timeout = this.asSoonAsPossible ? 0 : this.timeout;\n    this.processTimeout = this._setTimeout(this._onTimeout.bind(this), timeout);\n  }\n\n  _clearTimeout(timeoutId: number): void {\n    clearTimeout(timeoutId);\n  }\n\n  _setTimeout(operation: () => void, timeout: number): number {\n    return window.setTimeout(operation, timeout);\n  }\n\n  _getTime(): number {\n    return window.performance.now();\n  }\n}\n"]}