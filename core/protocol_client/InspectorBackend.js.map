{"version":3,"file":"InspectorBackend.js","sourceRoot":"","sources":["../../../../../../front_end/core/protocol_client/InspectorBackend.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport {NodeURL} from './NodeURL.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nexport const DevToolsStubErrorCode = -32015;\n// TODO(dgozman): we are not reporting generic errors in tests, but we should\n// instead report them and just have some expected errors in test expectations.\nconst GenericError = -32000;\nconst ConnectionClosedErrorCode = -32001;\n\ntype MessageParams = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any,\n};\n\ntype ProtocolDomainName = ProtocolProxyApi.ProtocolDomainName;\n\nexport interface MessageError {\n  code: number;\n  message: string;\n  data?: string|null;\n}\n\nexport type Message = {\n  sessionId?: string,\n  url?: string,\n  id?: number,\n  error?: MessageError|null,\n  result?: Object|null,\n  method?: QualifiedName,\n  params?: MessageParams|null,\n};\n\ninterface EventMessage extends Message {\n  method: QualifiedName;\n  params?: MessageParams|null;\n}\n\n/** A qualified name, e.g. Domain.method */\nexport type QualifiedName = string&{qualifiedEventNameTag: string | undefined};\n/** A qualified name, e.g. method */\nexport type UnqualifiedName = string&{unqualifiedEventNameTag: string | undefined};\n\nexport const splitQualifiedName = (string: QualifiedName): [string, UnqualifiedName] => {\n  const [domain, eventName] = string.split('.');\n  return [domain, eventName as UnqualifiedName];\n};\n\nexport const qualifyName = (domain: string, name: UnqualifiedName): QualifiedName => {\n  return `${domain}.${name}` as QualifiedName;\n};\n\ntype EventParameterNames = Map<QualifiedName, string[]>;\ntype ReadonlyEventParameterNames = ReadonlyMap<QualifiedName, string[]>;\n\ninterface CommandParameter {\n  name: string;\n  type: string;\n  optional: boolean;\n}\n\ntype Callback = (error: MessageError|null, arg1: Object|null) => void;\n\ninterface CallbackWithDebugInfo {\n  callback: Callback;\n  method: string;\n}\n\nexport class InspectorBackend {\n  _agentPrototypes: Map<ProtocolDomainName, _AgentPrototype> = new Map();\n  private initialized: boolean = false;\n  private eventParameterNamesForDomain = new Map<ProtocolDomainName, EventParameterNames>();\n\n  private getOrCreateEventParameterNamesForDomain(domain: ProtocolDomainName): EventParameterNames {\n    let map = this.eventParameterNamesForDomain.get(domain);\n    if (!map) {\n      map = new Map();\n      this.eventParameterNamesForDomain.set(domain, map);\n    }\n    return map;\n  }\n\n  getOrCreateEventParameterNamesForDomainForTesting(domain: ProtocolDomainName): EventParameterNames {\n    return this.getOrCreateEventParameterNamesForDomain(domain);\n  }\n\n  getEventParamterNames(): ReadonlyMap<ProtocolDomainName, ReadonlyEventParameterNames> {\n    return this.eventParameterNamesForDomain;\n  }\n\n  static reportProtocolError(error: string, messageObject: Object): void {\n    console.error(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  static reportProtocolWarning(error: string, messageObject: Object): void {\n    console.warn(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  _agentPrototype(domain: ProtocolDomainName): _AgentPrototype {\n    let prototype = this._agentPrototypes.get(domain);\n    if (!prototype) {\n      prototype = new _AgentPrototype(domain);\n      this._agentPrototypes.set(domain, prototype);\n    }\n    return prototype;\n  }\n\n  registerCommand(method: QualifiedName, parameters: CommandParameter[], replyArgs: string[]): void {\n    const [domain, command] = splitQualifiedName(method);\n    this._agentPrototype(domain as ProtocolDomainName).registerCommand(command, parameters, replyArgs);\n    this.initialized = true;\n  }\n\n  registerEnum(type: QualifiedName, values: Object): void {\n    const [domain, name] = splitQualifiedName(type);\n    // @ts-ignore Protocol global namespace pollution\n    if (!Protocol[domain]) {\n      // @ts-ignore Protocol global namespace pollution\n      Protocol[domain] = {};\n    }\n\n    // @ts-ignore Protocol global namespace pollution\n    Protocol[domain][name] = values;\n    this.initialized = true;\n  }\n\n  registerEvent(eventName: QualifiedName, params: string[]): void {\n    const domain = eventName.split('.')[0];\n    const eventParameterNames = this.getOrCreateEventParameterNamesForDomain(domain as ProtocolDomainName);\n    eventParameterNames.set(eventName, params);\n    this.initialized = true;\n  }\n}\n\nlet connectionFactory: () => Connection;\n\nexport class Connection {\n  _onMessage!: ((arg0: Object) => void)|null;\n  constructor() {\n  }\n\n  setOnMessage(_onMessage: (arg0: (Object|string)) => void): void {\n  }\n\n  setOnDisconnect(_onDisconnect: (arg0: string) => void): void {\n  }\n\n  sendRawMessage(_message: string): void {\n  }\n\n  disconnect(): Promise<void> {\n    throw new Error('not implemented');\n  }\n\n  static setFactory(factory: () => Connection): void {\n    connectionFactory = factory;\n  }\n\n  static getFactory(): () => Connection {\n    return connectionFactory;\n  }\n}\n\ntype SendRawMessageCallback = (...args: unknown[]) => void;  // eslint-disable-line no-unused-vars\n\nexport const test = {\n  /**\n   * This will get called for every protocol message.\n   * ProtocolClient.test.dumpProtocol = console.log\n   */\n  dumpProtocol: null as ((arg0: string) => void) | null,\n\n  /**\n   * Runs a function when no protocol activity is present.\n   * ProtocolClient.test.deprecatedRunAfterPendingDispatches(() => console.log('done'))\n   */\n  deprecatedRunAfterPendingDispatches: null as ((arg0: () => void) => void) | null,\n\n  /**\n   * Sends a raw message over main connection.\n   * ProtocolClient.test.sendRawMessage('Page.enable', {}, console.log)\n   */\n  sendRawMessage: null as ((method: QualifiedName, args: Object|null, arg2: SendRawMessageCallback) => void) | null,\n\n  /**\n   * Set to true to not log any errors.\n   */\n  suppressRequestErrors: false as boolean,\n\n  /**\n   * Set to get notified about any messages sent over protocol.\n   */\n  onMessageSent: null as\n          ((message: {domain: string, method: string, params: Object, id: number, sessionId?: string},\n            target: TargetBase|null) => void) |\n      null,\n\n  /**\n   * Set to get notified about any messages received over protocol.\n   */\n  onMessageReceived: null as ((message: Object, target: TargetBase|null) => void) | null,\n};\n\nconst LongPollingMethods = new Set<string>(['CSS.takeComputedStyleUpdates']);\n\nconst screenshotCDP = [\n\t'Emulation.setEmulatedMedia',\n\t'Page.startScreencast',\n\t'Emulation.setTouchEmulationEnabled',\n\t'Page.stopScreencast',\n\t'Emulation.setEmitTouchEventsForMouse',\n\t'Input.emulateTouchFromMouseEvent',\n\t'DOM.getNodeForLocation',\n\t'DOM.getBoxModel',\n\t'Page.screencastFrameAck',\n];\n\nexport class SessionRouter {\n  _connection: Connection;\n  connectionInternal: Connection;\n  _lastMessageId: number;\n  _pendingResponsesCount: number;\n  _pendingLongPollingMessageIds: Set<number>;\n  _sessions: Map<string, {\n    target: TargetBase,\n    callbacks: Map<number, CallbackWithDebugInfo>,\n    proxyConnection: ((Connection | undefined)|null),\n  }>;\n  _pendingScripts: (() => void)[];\n\n  constructor(connection: Connection) {\n    this._connection = connection;\n    this.connectionInternal = connection;\n    this._lastMessageId = 1;\n    this._pendingResponsesCount = 0;\n    this._pendingLongPollingMessageIds = new Set();\n\n    this._sessions = new Map();\n\n    this._pendingScripts = [];\n\n    test.deprecatedRunAfterPendingDispatches = this._deprecatedRunAfterPendingDispatches.bind(this);\n    test.sendRawMessage = this._sendRawMessageForTesting.bind(this);\n\n    this._connection.setOnMessage(this._onMessage.bind(this));\n\n    this._connection.setOnDisconnect(reason => {\n      const session = this._sessions.get('');\n      if (session) {\n        session.target.dispose(reason);\n      }\n    });\n  }\n\n  registerSession(target: TargetBase, sessionId: string, proxyConnection?: Connection|null): void {\n    // Only the Audits panel uses proxy connections. If it is ever possible to have multiple active at the\n    // same time, it should be tested thoroughly.\n    if (proxyConnection) {\n      for (const session of this._sessions.values()) {\n        if (session.proxyConnection) {\n          console.error('Multiple simultaneous proxy connections are currently unsupported');\n          break;\n        }\n      }\n    }\n\n    this._sessions.set(sessionId, {target, callbacks: new Map(), proxyConnection});\n  }\n\n  unregisterSession(sessionId: string): void {\n    const session = this._sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n    for (const callback of session.callbacks.values()) {\n      SessionRouter.dispatchUnregisterSessionError(callback);\n    }\n    this._sessions.delete(sessionId);\n  }\n\n  _getTargetBySessionId(sessionId: string): TargetBase|null {\n    const session = this._sessions.get(sessionId ? sessionId : '');\n    if (!session) {\n      return null;\n    }\n    return session.target;\n  }\n\n  _nextMessageId(): number {\n    return this._lastMessageId++;\n  }\n\n  connection(): Connection {\n    return this._connection;\n  }\n\n  sendMessage(sessionId: string, domain: string, method: QualifiedName, params: Object|null, callback: Callback): void {\n    const messageId = this._nextMessageId();\n    const messageObject: Message = {\n      id: messageId,\n      method: method,\n    };\n\n    if (params) {\n      messageObject.params = params;\n    }\n    if (sessionId) {\n      messageObject.sessionId = sessionId;\n    }\n\n    if (test.dumpProtocol) {\n      test.dumpProtocol('frontend: ' + JSON.stringify(messageObject));\n    }\n\n    if (test.onMessageSent) {\n      const paramsObject = JSON.parse(JSON.stringify(params || {}));\n      test.onMessageSent(\n          {domain, method, params: (paramsObject as Object), id: messageId, sessionId},\n          this._getTargetBySessionId(sessionId));\n    }\n\n    ++this._pendingResponsesCount;\n    if (LongPollingMethods.has(method)) {\n      this._pendingLongPollingMessageIds.add(messageId);\n    }\n\n    const session = this._sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n    session.callbacks.set(messageId, {callback, method});\n    this._connection.sendRawMessage(JSON.stringify(messageObject));\n  }\n\n  _sendRawMessageForTesting(method: QualifiedName, params: Object|null, callback: Callback|null): void {\n    const domain = method.split('.')[0];\n    this.sendMessage('', domain, method, params, callback || ((): void => {}));\n  }\n\n  _onMessage(message: string|Object): void {\n    if (test.dumpProtocol) {\n      test.dumpProtocol('backend: ' + ((typeof message === 'string') ? message : JSON.stringify(message)));\n    }\n\n    if (test.onMessageReceived) {\n      const messageObjectCopy = JSON.parse((typeof message === 'string') ? message : JSON.stringify(message));\n      test.onMessageReceived(messageObjectCopy, this._getTargetBySessionId(messageObjectCopy.sessionId));\n    }\n\n    const messageObject = ((typeof message === 'string') ? JSON.parse(message) : message) as Message;\n\n    if( messageObject?.method\n      &&  screenshotCDP.indexOf(messageObject?.method || 'neverUseString') > -1){\n        this.sendMessage('',messageObject?.method.split('.')[0],\n         messageObject?.method, (messageObject?.params as Object), ()=>{});\n         return;\n      }\n\n    // Send all messages to proxy connections.\n    let suppressUnknownMessageErrors = false;\n    for (const session of this._sessions.values()) {\n      if (!session.proxyConnection) {\n        continue;\n      }\n\n      if (!session.proxyConnection._onMessage) {\n        InspectorBackend.reportProtocolError(\n            'Protocol Error: the session has a proxyConnection with no _onMessage', messageObject);\n        continue;\n      }\n\n      session.proxyConnection._onMessage(messageObject);\n      suppressUnknownMessageErrors = true;\n    }\n\n    const sessionId = messageObject.sessionId || '';\n    const session = this._sessions.get(sessionId);\n    if (!session) {\n      if (!suppressUnknownMessageErrors) {\n        InspectorBackend.reportProtocolError('Protocol Error: the message with wrong session id', messageObject);\n      }\n      return;\n    }\n\n    // If this message is directly for the target controlled by the proxy connection, don't handle it.\n    if (session.proxyConnection) {\n      return;\n    }\n\n    if (session.target._needsNodeJSPatching) {\n      NodeURL.patch(messageObject);\n    }\n\n    if (messageObject.id !== undefined) {  // just a response for some request\n      const callback = session.callbacks.get(messageObject.id);\n      session.callbacks.delete(messageObject.id);\n      if (!callback) {\n        if (!suppressUnknownMessageErrors) {\n          InspectorBackend.reportProtocolError('Protocol Error: the message with wrong id', messageObject);\n        }\n        return;\n      }\n\n      callback.callback(messageObject.error || null, messageObject.result || null);\n      --this._pendingResponsesCount;\n      this._pendingLongPollingMessageIds.delete(messageObject.id);\n\n      if (this._pendingScripts.length && !this._hasOutstandingNonLongPollingRequests()) {\n        this._deprecatedRunAfterPendingDispatches();\n      }\n    } else {\n      if (messageObject.method === undefined) {\n        InspectorBackend.reportProtocolError('Protocol Error: the message without method', messageObject);\n        return;\n      }\n      // This cast is justified as we just checked for the presence of messageObject.method.\n      const eventMessage = messageObject as EventMessage;\n      session.target.dispatch(eventMessage);\n    }\n  }\n\n  _hasOutstandingNonLongPollingRequests(): boolean {\n    return this._pendingResponsesCount - this._pendingLongPollingMessageIds.size > 0;\n  }\n\n  _deprecatedRunAfterPendingDispatches(script?: (() => void)): void {\n    if (script) {\n      this._pendingScripts.push(script);\n    }\n\n    // Execute all promises.\n    setTimeout(() => {\n      if (!this._hasOutstandingNonLongPollingRequests()) {\n        this._executeAfterPendingDispatches();\n      } else {\n        this._deprecatedRunAfterPendingDispatches();\n      }\n    }, 0);\n  }\n\n  _executeAfterPendingDispatches(): void {\n    if (!this._hasOutstandingNonLongPollingRequests()) {\n      const scripts = this._pendingScripts;\n      this._pendingScripts = [];\n      for (let id = 0; id < scripts.length; ++id) {\n        scripts[id]();\n      }\n    }\n  }\n\n  static dispatchConnectionError(callback: Callback, method: string): void {\n    const error = {\n      message: `Connection is closed, can\\'t dispatch pending call to ${method}`,\n      code: ConnectionClosedErrorCode,\n      data: null,\n    };\n    setTimeout(() => callback(error, null), 0);\n  }\n\n  static dispatchUnregisterSessionError({callback, method}: CallbackWithDebugInfo): void {\n    const error = {\n      message: `Session is unregistering, can\\'t dispatch pending call to ${method}`,\n      code: ConnectionClosedErrorCode,\n      data: null,\n    };\n    setTimeout(() => callback(error, null), 0);\n  }\n}\n\n/**\n  * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n  * name, because if `Domain` allows multiple domains, the type is unsound.\n  */\ninterface AgentsMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolApi[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): ProtocolProxyApi.ProtocolApi[Domain]|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: ProtocolProxyApi.ProtocolApi[Domain]): this;\n}\n\n/**\n  * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n  * name, because if `Domain` allows multiple domains, the type is unsound.\n  */\ninterface DispatcherMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolDispatchers[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): DispatcherManager<Domain>|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: DispatcherManager<Domain>): this;\n}\n\nexport class TargetBase {\n  _needsNodeJSPatching: boolean;\n  _sessionId: string;\n  _router: SessionRouter|null;\n  private agents: AgentsMap = new Map();\n  private dispatchers: DispatcherMap = new Map();\n\n  constructor(\n      needsNodeJSPatching: boolean, parentTarget: TargetBase|null, sessionId: string, connection: Connection|null) {\n    this._needsNodeJSPatching = needsNodeJSPatching;\n    this._sessionId = sessionId;\n\n    if ((!parentTarget && connection) || (!parentTarget && sessionId) || (connection && sessionId)) {\n      throw new Error('Either connection or sessionId (but not both) must be supplied for a child target');\n    }\n\n    let router: SessionRouter;\n    if (sessionId && parentTarget && parentTarget._router) {\n      router = parentTarget._router;\n    } else if (connection) {\n      router = new SessionRouter(connection);\n    } else {\n      router = new SessionRouter(connectionFactory());\n    }\n\n    this._router = router;\n\n    router.registerSession(this, this._sessionId);\n\n    for (const [domain, agentPrototype] of inspectorBackend._agentPrototypes) {\n      const agent = Object.create((agentPrototype as _AgentPrototype));\n      agent._target = this;\n      this.agents.set(domain, agent);\n    }\n\n    for (const [domain, eventParameterNames] of inspectorBackend.getEventParamterNames().entries()) {\n      this.dispatchers.set(domain, new DispatcherManager(eventParameterNames));\n    }\n  }\n\n  dispatch(eventMessage: EventMessage): void {\n    const [domainName, method] = splitQualifiedName(eventMessage.method);\n    const dispatcher = this.dispatchers.get(domainName as ProtocolDomainName);\n    if (!dispatcher) {\n      InspectorBackend.reportProtocolError(\n          `Protocol Error: the message ${eventMessage.method} is for non-existing domain '${domainName}'`,\n          eventMessage);\n      return;\n    }\n    dispatcher.dispatch(method, eventMessage);\n  }\n\n  dispose(_reason: string): void {\n    if (!this._router) {\n      return;\n    }\n    this._router.unregisterSession(this._sessionId);\n    this._router = null;\n  }\n\n  isDisposed(): boolean {\n    return !this._router;\n  }\n\n  markAsNodeJSForTest(): void {\n    this._needsNodeJSPatching = true;\n  }\n\n  router(): SessionRouter|null {\n    return this._router;\n  }\n\n  // Agent accessors, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private getAgent<Domain extends ProtocolDomainName>(domain: Domain): ProtocolProxyApi.ProtocolApi[Domain] {\n    const agent = this.agents.get<Domain>(domain);\n    if (!agent) {\n      throw new Error('Accessing undefined agent');\n    }\n    return agent;\n  }\n\n  accessibilityAgent(): ProtocolProxyApi.AccessibilityApi {\n    return this.getAgent('Accessibility');\n  }\n\n  animationAgent(): ProtocolProxyApi.AnimationApi {\n    return this.getAgent('Animation');\n  }\n\n  applicationCacheAgent(): ProtocolProxyApi.ApplicationCacheApi {\n    return this.getAgent('ApplicationCache');\n  }\n\n  auditsAgent(): ProtocolProxyApi.AuditsApi {\n    return this.getAgent('Audits');\n  }\n\n  browserAgent(): ProtocolProxyApi.BrowserApi {\n    return this.getAgent('Browser');\n  }\n\n  backgroundServiceAgent(): ProtocolProxyApi.BackgroundServiceApi {\n    return this.getAgent('BackgroundService');\n  }\n\n  cacheStorageAgent(): ProtocolProxyApi.CacheStorageApi {\n    return this.getAgent('CacheStorage');\n  }\n\n  cssAgent(): ProtocolProxyApi.CSSApi {\n    return this.getAgent('CSS');\n  }\n\n  databaseAgent(): ProtocolProxyApi.DatabaseApi {\n    return this.getAgent('Database');\n  }\n\n  debuggerAgent(): ProtocolProxyApi.DebuggerApi {\n    return this.getAgent('Debugger');\n  }\n\n  deviceOrientationAgent(): ProtocolProxyApi.DeviceOrientationApi {\n    return this.getAgent('DeviceOrientation');\n  }\n\n  domAgent(): ProtocolProxyApi.DOMApi {\n    return this.getAgent('DOM');\n  }\n\n  domdebuggerAgent(): ProtocolProxyApi.DOMDebuggerApi {\n    return this.getAgent('DOMDebugger');\n  }\n\n  domsnapshotAgent(): ProtocolProxyApi.DOMSnapshotApi {\n    return this.getAgent('DOMSnapshot');\n  }\n\n  domstorageAgent(): ProtocolProxyApi.DOMStorageApi {\n    return this.getAgent('DOMStorage');\n  }\n\n  emulationAgent(): ProtocolProxyApi.EmulationApi {\n    return this.getAgent('Emulation');\n  }\n\n  heapProfilerAgent(): ProtocolProxyApi.HeapProfilerApi {\n    return this.getAgent('HeapProfiler');\n  }\n\n  indexedDBAgent(): ProtocolProxyApi.IndexedDBApi {\n    return this.getAgent('IndexedDB');\n  }\n\n  inputAgent(): ProtocolProxyApi.InputApi {\n    return this.getAgent('Input');\n  }\n\n  ioAgent(): ProtocolProxyApi.IOApi {\n    return this.getAgent('IO');\n  }\n\n  inspectorAgent(): ProtocolProxyApi.InspectorApi {\n    return this.getAgent('Inspector');\n  }\n\n  layerTreeAgent(): ProtocolProxyApi.LayerTreeApi {\n    return this.getAgent('LayerTree');\n  }\n\n  logAgent(): ProtocolProxyApi.LogApi {\n    return this.getAgent('Log');\n  }\n\n  mediaAgent(): ProtocolProxyApi.MediaApi {\n    return this.getAgent('Media');\n  }\n\n  memoryAgent(): ProtocolProxyApi.MemoryApi {\n    return this.getAgent('Memory');\n  }\n\n  networkAgent(): ProtocolProxyApi.NetworkApi {\n    return this.getAgent('Network');\n  }\n\n  overlayAgent(): ProtocolProxyApi.OverlayApi {\n    return this.getAgent('Overlay');\n  }\n\n  pageAgent(): ProtocolProxyApi.PageApi {\n    return this.getAgent('Page');\n  }\n\n  profilerAgent(): ProtocolProxyApi.ProfilerApi {\n    return this.getAgent('Profiler');\n  }\n\n  performanceAgent(): ProtocolProxyApi.PerformanceApi {\n    return this.getAgent('Performance');\n  }\n\n  runtimeAgent(): ProtocolProxyApi.RuntimeApi {\n    return this.getAgent('Runtime');\n  }\n\n  securityAgent(): ProtocolProxyApi.SecurityApi {\n    return this.getAgent('Security');\n  }\n\n  serviceWorkerAgent(): ProtocolProxyApi.ServiceWorkerApi {\n    return this.getAgent('ServiceWorker');\n  }\n\n  storageAgent(): ProtocolProxyApi.StorageApi {\n    return this.getAgent('Storage');\n  }\n\n  targetAgent(): ProtocolProxyApi.TargetApi {\n    return this.getAgent('Target');\n  }\n\n  tracingAgent(): ProtocolProxyApi.TracingApi {\n    return this.getAgent('Tracing');\n  }\n\n  webAudioAgent(): ProtocolProxyApi.WebAudioApi {\n    return this.getAgent('WebAudio');\n  }\n\n  webAuthnAgent(): ProtocolProxyApi.WebAuthnApi {\n    return this.getAgent('WebAuthn');\n  }\n\n  // Dispatcher registration and de-registration, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private registerDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.addDomainDispatcher(dispatcher);\n  }\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private unregisterDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.removeDomainDispatcher(dispatcher);\n  }\n\n  registerAnimationDispatcher(dispatcher: ProtocolProxyApi.AnimationDispatcher): void {\n    this.registerDispatcher('Animation', dispatcher);\n  }\n\n  registerApplicationCacheDispatcher(dispatcher: ProtocolProxyApi.ApplicationCacheDispatcher): void {\n    this.registerDispatcher('ApplicationCache', dispatcher);\n  }\n\n  registerAuditsDispatcher(dispatcher: ProtocolProxyApi.AuditsDispatcher): void {\n    this.registerDispatcher('Audits', dispatcher);\n  }\n\n  registerCSSDispatcher(dispatcher: ProtocolProxyApi.CSSDispatcher): void {\n    this.registerDispatcher('CSS', dispatcher);\n  }\n\n  registerDatabaseDispatcher(dispatcher: ProtocolProxyApi.DatabaseDispatcher): void {\n    this.registerDispatcher('Database', dispatcher);\n  }\n\n  registerBackgroundServiceDispatcher(dispatcher: ProtocolProxyApi.BackgroundServiceDispatcher): void {\n    this.registerDispatcher('BackgroundService', dispatcher);\n  }\n\n  registerDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.registerDispatcher('Debugger', dispatcher);\n  }\n\n  unregisterDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.unregisterDispatcher('Debugger', dispatcher);\n  }\n\n  registerDOMDispatcher(dispatcher: ProtocolProxyApi.DOMDispatcher): void {\n    this.registerDispatcher('DOM', dispatcher);\n  }\n\n  registerDOMStorageDispatcher(dispatcher: ProtocolProxyApi.DOMStorageDispatcher): void {\n    this.registerDispatcher('DOMStorage', dispatcher);\n  }\n\n  registerHeapProfilerDispatcher(dispatcher: ProtocolProxyApi.HeapProfilerDispatcher): void {\n    this.registerDispatcher('HeapProfiler', dispatcher);\n  }\n\n  registerInspectorDispatcher(dispatcher: ProtocolProxyApi.InspectorDispatcher): void {\n    this.registerDispatcher('Inspector', dispatcher);\n  }\n\n  registerLayerTreeDispatcher(dispatcher: ProtocolProxyApi.LayerTreeDispatcher): void {\n    this.registerDispatcher('LayerTree', dispatcher);\n  }\n\n  registerLogDispatcher(dispatcher: ProtocolProxyApi.LogDispatcher): void {\n    this.registerDispatcher('Log', dispatcher);\n  }\n\n  registerMediaDispatcher(dispatcher: ProtocolProxyApi.MediaDispatcher): void {\n    this.registerDispatcher('Media', dispatcher);\n  }\n\n  registerNetworkDispatcher(dispatcher: ProtocolProxyApi.NetworkDispatcher): void {\n    this.registerDispatcher('Network', dispatcher);\n  }\n\n  registerOverlayDispatcher(dispatcher: ProtocolProxyApi.OverlayDispatcher): void {\n    this.registerDispatcher('Overlay', dispatcher);\n  }\n\n  registerPageDispatcher(dispatcher: ProtocolProxyApi.PageDispatcher): void {\n    this.registerDispatcher('Page', dispatcher);\n  }\n\n  registerProfilerDispatcher(dispatcher: ProtocolProxyApi.ProfilerDispatcher): void {\n    this.registerDispatcher('Profiler', dispatcher);\n  }\n\n  registerRuntimeDispatcher(dispatcher: ProtocolProxyApi.RuntimeDispatcher): void {\n    this.registerDispatcher('Runtime', dispatcher);\n  }\n\n  registerSecurityDispatcher(dispatcher: ProtocolProxyApi.SecurityDispatcher): void {\n    this.registerDispatcher('Security', dispatcher);\n  }\n\n  registerServiceWorkerDispatcher(dispatcher: ProtocolProxyApi.ServiceWorkerDispatcher): void {\n    this.registerDispatcher('ServiceWorker', dispatcher);\n  }\n\n  registerStorageDispatcher(dispatcher: ProtocolProxyApi.StorageDispatcher): void {\n    this.registerDispatcher('Storage', dispatcher);\n  }\n\n  registerTargetDispatcher(dispatcher: ProtocolProxyApi.TargetDispatcher): void {\n    this.registerDispatcher('Target', dispatcher);\n  }\n\n  registerTracingDispatcher(dispatcher: ProtocolProxyApi.TracingDispatcher): void {\n    this.registerDispatcher('Tracing', dispatcher);\n  }\n\n  registerWebAudioDispatcher(dispatcher: ProtocolProxyApi.WebAudioDispatcher): void {\n    this.registerDispatcher('WebAudio', dispatcher);\n  }\n}\n\n/**\n * This is a class that serves as the prototype for a domains agents (every target\n * has it's own set of agents). The InspectorBackend keeps an instance of this class\n * per domain, and each TargetBase creates its agents (via Object.create) and installs\n * this instance as prototype.\n *\n * The reasons this is done is so that on the prototypes we can install the implementations\n * of the invoke_enable, etc. methods that the front-end uses.\n */\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass _AgentPrototype {\n  _replyArgs: {\n    [x: string]: string[],\n  };\n  _domain: string;\n  _target!: TargetBase;\n  constructor(domain: string) {\n    this._replyArgs = {};\n    this._domain = domain;\n  }\n\n  registerCommand(methodName: UnqualifiedName, parameters: CommandParameter[], replyArgs: string[]): void {\n    const domainAndMethod = qualifyName(this._domain, methodName);\n\n    function sendMessagePromise(this: _AgentPrototype, ...args: unknown[]): Promise<unknown> {\n      return _AgentPrototype.prototype._sendMessageToBackendPromise.call(this, domainAndMethod, parameters, args);\n    }\n\n    // @ts-ignore Method code generation\n    this[methodName] = sendMessagePromise;\n\n    function invoke(\n        this: _AgentPrototype, request: Object|undefined = {}): Promise<Protocol.ProtocolResponseWithError> {\n      return this._invoke(domainAndMethod, request);\n    }\n\n    // @ts-ignore Method code generation\n    this['invoke_' + methodName] = invoke;\n\n    this._replyArgs[domainAndMethod] = replyArgs;\n  }\n\n  _prepareParameters(\n      method: string, parameters: CommandParameter[], args: unknown[], errorCallback: (arg0: string) => void): Object\n      |null {\n    const params: {[x: string]: unknown} = {};\n    let hasParams = false;\n\n    for (const param of parameters) {\n      const paramName = param.name;\n      const typeName = param.type;\n      const optionalFlag = param.optional;\n\n      if (!args.length && !optionalFlag) {\n        errorCallback(\n            `Protocol Error: Invalid number of arguments for method '${method}' call. ` +\n            `It must have the following arguments ${JSON.stringify(parameters)}'.`);\n        return null;\n      }\n\n      const value = args.shift();\n      if (optionalFlag && typeof value === 'undefined') {\n        continue;\n      }\n\n      if (typeof value !== typeName) {\n        errorCallback(\n            `Protocol Error: Invalid type of argument '${paramName}' for method '${method}' call. ` +\n            `It must be '${typeName}' but it is '${typeof value}'.`);\n        return null;\n      }\n\n      params[paramName] = value;\n      hasParams = true;\n    }\n\n    if (args.length) {\n      errorCallback(`Protocol Error: Extra ${args.length} arguments in a call to method '${method}'.`);\n      return null;\n    }\n\n    return hasParams ? params : null;\n  }\n\n  _sendMessageToBackendPromise(method: QualifiedName, parameters: CommandParameter[], args: unknown[]):\n      Promise<unknown> {\n    let errorMessage;\n    function onError(message: string): void {\n      console.error(message);\n      errorMessage = message;\n    }\n    const params = this._prepareParameters(method, parameters, args, onError);\n    if (errorMessage) {\n      return Promise.resolve(null);\n    }\n\n    return new Promise(resolve => {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const callback: Callback = (error: MessageError|null, result: any|null): void => {\n        if (error) {\n          if (!test.suppressRequestErrors && error.code !== DevToolsStubErrorCode && error.code !== GenericError &&\n              error.code !== ConnectionClosedErrorCode) {\n            console.error('Request ' + method + ' failed. ' + JSON.stringify(error));\n          }\n\n          resolve(null);\n          return;\n        }\n\n        const args = this._replyArgs[method];\n        resolve(result && args.length ? result[args[0]] : undefined);\n      };\n\n      if (!this._target._router) {\n        SessionRouter.dispatchConnectionError(callback, method);\n      } else {\n        this._target._router.sendMessage(this._target._sessionId, this._domain, method, params, callback);\n      }\n    });\n  }\n\n  _invoke(method: QualifiedName, request: Object|null): Promise<Protocol.ProtocolResponseWithError> {\n    return new Promise(fulfill => {\n      const callback: Callback = (error: MessageError|undefined|null, result: Object|null): void => {\n        if (error && !test.suppressRequestErrors && error.code !== DevToolsStubErrorCode &&\n            error.code !== GenericError && error.code !== ConnectionClosedErrorCode) {\n          console.error('Request ' + method + ' failed. ' + JSON.stringify(error));\n        }\n\n        const errorMessage = error?.message;\n        fulfill({...result, getError: (): string | undefined => errorMessage});\n      };\n\n      if (!this._target._router) {\n        SessionRouter.dispatchConnectionError(callback, method);\n      } else {\n        this._target._router.sendMessage(this._target._sessionId, this._domain, method, request, callback);\n      }\n    });\n  }\n}\n\n/**\n * A `DispatcherManager` has a collection of dispatchers that implement one of the\n * `ProtocolProxyApi.{Foo}Dispatcher` interfaces. Each target uses one of these per\n * domain to manage the registered dispatchers. The class knows the parameter names\n * of the events via `eventArgs`, which is a map managed by the inspector back-end\n * so that there is only one map per domain that is shared among all DispatcherManagers.\n */\nclass DispatcherManager<Domain extends ProtocolDomainName> {\n  private eventArgs: ReadonlyEventParameterNames;\n  private dispatchers: ProtocolProxyApi.ProtocolDispatchers[Domain][] = [];\n\n  constructor(eventArgs: ReadonlyEventParameterNames) {\n    this.eventArgs = eventArgs;\n  }\n\n  addDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    this.dispatchers.push(dispatcher);\n  }\n\n  removeDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const index = this.dispatchers.indexOf(dispatcher);\n    if (index === -1) {\n      return;\n    }\n    this.dispatchers.splice(index, 1);\n  }\n\n  dispatch(event: UnqualifiedName, messageObject: EventMessage): void {\n    if (!this.dispatchers.length) {\n      return;\n    }\n\n    if (!this.eventArgs.has(messageObject.method)) {\n      InspectorBackend.reportProtocolWarning(\n          `Protocol Warning: Attempted to dispatch an unspecified event '${messageObject.method}'`, messageObject);\n      return;\n    }\n\n    const messageParams = {...messageObject.params};\n    for (let index = 0; index < this.dispatchers.length; ++index) {\n      const dispatcher = this.dispatchers[index];\n\n      if (event in dispatcher) {\n        const f = dispatcher[event as string as keyof ProtocolProxyApi.ProtocolDispatchers[Domain]];\n        // @ts-ignore Can't type check the dispatch.\n        f.call(dispatcher, messageParams);\n      }\n    }\n  }\n}\n\nexport const inspectorBackend = new InspectorBackend();\n"]}