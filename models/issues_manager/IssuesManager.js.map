{"version":3,"file":"IssuesManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/IssuesManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {ContentSecurityPolicyIssue} from './ContentSecurityPolicyIssue.js';\nimport {CorsIssue} from './CorsIssue.js';\nimport {CrossOriginEmbedderPolicyIssue, isCrossOriginEmbedderPolicyIssue} from './CrossOriginEmbedderPolicyIssue.js';\nimport {DeprecationIssue} from './DeprecationIssue.js';\nimport {HeavyAdIssue} from './HeavyAdIssue.js';\nimport type {Issue, IssueKind} from './Issue.js';\nimport {Events} from './IssuesManagerEvents.js';\nimport {LowTextContrastIssue} from './LowTextContrastIssue.js';\nimport {MixedContentIssue} from './MixedContentIssue.js';\nimport {QuirksModeIssue} from './QuirksModeIssue.js';\nimport {SameSiteCookieIssue} from './SameSiteCookieIssue.js';\nimport {SharedArrayBufferIssue} from './SharedArrayBufferIssue.js';\nimport {SourceFrameIssuesManager} from './SourceFrameIssuesManager.js';\nimport {TrustedWebActivityIssue} from './TrustedWebActivityIssue.js';\nimport {AttributionReportingIssue} from './AttributionReportingIssue.js';\nimport {WasmCrossOriginModuleSharingIssue} from './WasmCrossOriginModuleSharingIssue.js';\n\nexport {Events} from './IssuesManagerEvents.js';\n\nlet issuesManagerInstance: IssuesManager|null = null;\n\n\nfunction createIssuesForBlockedByResponseIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel,\n    inspectorIssue: Protocol.Audits.InspectorIssue): CrossOriginEmbedderPolicyIssue[] {\n  const blockedByResponseIssueDetails = inspectorIssue.details.blockedByResponseIssueDetails;\n  if (!blockedByResponseIssueDetails) {\n    console.warn('BlockedByResponse issue without details received.');\n    return [];\n  }\n  if (isCrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails.reason)) {\n    return [new CrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails, issuesModel)];\n  }\n  return [];\n}\n\nconst issueCodeHandlers = new Map<\n    Protocol.Audits.InspectorIssueCode,\n    (model: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue) => Issue[]>([\n  [\n    Protocol.Audits.InspectorIssueCode.SameSiteCookieIssue,\n    SameSiteCookieIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.MixedContentIssue,\n    MixedContentIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.HeavyAdIssue,\n    HeavyAdIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,\n    ContentSecurityPolicyIssue.fromInspectorIssue,\n  ],\n  [Protocol.Audits.InspectorIssueCode.BlockedByResponseIssue, createIssuesForBlockedByResponseIssue],\n  [\n    Protocol.Audits.InspectorIssueCode.SharedArrayBufferIssue,\n    SharedArrayBufferIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.TrustedWebActivityIssue,\n    TrustedWebActivityIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.LowTextContrastIssue,\n    LowTextContrastIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.CorsIssue,\n    CorsIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.QuirksModeIssue,\n    QuirksModeIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.NavigatorUserAgentIssue,\n    DeprecationIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.AttributionReportingIssue,\n    AttributionReportingIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.WasmCrossOriginModuleSharingIssue,\n    WasmCrossOriginModuleSharingIssue.fromInspectorIssue,\n  ],\n]);\n\n/**\n * Each issue reported by the backend can result in multiple `Issue` instances.\n * Handlers are simple functions hard-coded into a map.\n */\nfunction createIssuesFromProtocolIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue): Issue[] {\n  const handler = issueCodeHandlers.get(inspectorIssue.code);\n  if (handler) {\n    return handler(issuesModel, inspectorIssue);\n  }\n  console.warn(`No handler registered for issue code ${inspectorIssue.code}`);\n  return [];\n}\n\nexport interface IssuesManagerCreationOptions {\n  forceNew: boolean;\n  /** Throw an error if this is not the first instance created */\n  ensureFirst: boolean;\n  showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>;\n}\n\n/**\n * The `IssuesManager` is the central storage for issues. It collects issues from all the\n * `IssuesModel` instances in the page, and deduplicates them wrt their primary key.\n * It also takes care of clearing the issues when it sees a main-frame navigated event.\n * Any client can subscribe to the events provided, and/or query the issues via the public\n * interface.\n *\n * Additionally, the `IssuesManager` can filter Issues. All Issues are stored, but only\n * Issues that are accepted by the filter cause events to be fired or are returned by\n * `IssuesManager#issues()`.\n */\nexport class IssuesManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.IssuesModel.IssuesModel> {\n  private eventListeners = new WeakMap<SDK.IssuesModel.IssuesModel, Common.EventTarget.EventDescriptor>();\n  private allIssues = new Map<string, Issue>();\n  private filteredIssues = new Map<string, Issue>();\n  private issueCounts = new Map<IssueKind, number>();\n  private hasSeenTopFrameNavigated = false;\n  private sourceFrameIssuesManager = new SourceFrameIssuesManager(this);\n  private issuesById: Map<string, Issue> = new Map();\n\n  constructor(private readonly showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>) {\n    super();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.IssuesModel.IssuesModel, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.TopFrameNavigated, this.onTopFrameNavigated, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.FrameAddedToTarget, this.onFrameAddedToTarget, this);\n\n    // issueFilter uses the 'showThirdPartyIssues' setting. Clients of IssuesManager need\n    // a full update when the setting changes to get an up-to-date issues list.\n    this.showThirdPartyIssuesSetting?.addChangeListener(() => this.updateFilteredIssues());\n  }\n\n  static instance(opts: IssuesManagerCreationOptions = {\n    forceNew: false,\n    ensureFirst: false,\n  }): IssuesManager {\n    if (issuesManagerInstance && opts.ensureFirst) {\n      throw new Error(\n          'IssuesManager was already created. Either set \"ensureFirst\" to false or make sure that this invocation is really the first one.');\n    }\n\n    if (!issuesManagerInstance || opts.forceNew) {\n      issuesManagerInstance = new IssuesManager(opts.showThirdPartyIssuesSetting);\n    }\n\n    return issuesManagerInstance;\n  }\n\n  /**\n   * Once we have seen at least one `TopFrameNavigated` event, we can be reasonably sure\n   * that we also collected issues that were reported during the navigation to the current\n   * page. If we haven't seen a main frame navigated, we might have missed issues that arose\n   * during navigation.\n   */\n  reloadForAccurateInformationRequired(): boolean {\n    return !this.hasSeenTopFrameNavigated;\n  }\n\n  private onTopFrameNavigated(\n      event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>): void {\n    const {frame} = event.data;\n    const keptIssues = new Map<string, Issue>();\n    for (const [key, issue] of this.allIssues.entries()) {\n      if (issue.isAssociatedWithRequestId(frame.loaderId)) {\n        keptIssues.set(key, issue);\n      }\n    }\n    this.allIssues = keptIssues;\n    this.hasSeenTopFrameNavigated = true;\n    this.updateFilteredIssues();\n  }\n\n  private onFrameAddedToTarget(\n      event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>): void {\n    const {frame} = event.data;\n    // Determining third-party status usually requires the registered domain of the top frame.\n    // When DevTools is opened after navigation has completed, issues may be received\n    // before the top frame is available. Thus, we trigger a recalcuation of third-party-ness\n    // when we attach to the top frame.\n    if (frame.isTopFrame()) {\n      this.updateFilteredIssues();\n    }\n  }\n\n  modelAdded(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = issuesModel.addEventListener(SDK.IssuesModel.Events.IssueAdded, this.onIssueAddedEvent, this);\n    this.eventListeners.set(issuesModel, listener);\n  }\n\n  modelRemoved(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = this.eventListeners.get(issuesModel);\n    if (listener) {\n      Common.EventTarget.removeEventListeners([listener]);\n    }\n  }\n\n  private onIssueAddedEvent(event: Common.EventTarget.EventTargetEvent<SDK.IssuesModel.IssueAddedEvent>): void {\n    const {issuesModel, inspectorIssue} = event.data;\n    const issues = createIssuesFromProtocolIssue(issuesModel, inspectorIssue);\n    for (const issue of issues) {\n      this.addIssue(issuesModel, issue);\n    }\n  }\n\n  addIssue(issuesModel: SDK.IssuesModel.IssuesModel, issue: Issue): void {\n    // Ignore issues without proper description; they are invisible to the user and only cause confusion.\n    if (!issue.getDescription()) {\n      return;\n    }\n    const primaryKey = issue.primaryKey();\n    if (this.allIssues.has(primaryKey)) {\n      return;\n    }\n    this.allIssues.set(primaryKey, issue);\n\n    if (this.issueFilter(issue)) {\n      this.filteredIssues.set(primaryKey, issue);\n      this.issueCounts.set(issue.getKind(), 1 + (this.issueCounts.get(issue.getKind()) || 0));\n      const issueId = issue.getIssueId();\n      if (issueId) {\n        this.issuesById.set(issueId, issue);\n      }\n      this.dispatchEventToListeners(Events.IssueAdded, {issuesModel, issue});\n    }\n    // Always fire the \"count\" event even if the issue was filtered out.\n    // The result of `hasOnlyThirdPartyIssues` could still change.\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n\n  issues(): Iterable<Issue> {\n    return this.filteredIssues.values();\n  }\n\n  numberOfIssues(kind?: IssueKind): number {\n    if (kind) {\n      return this.issueCounts.get(kind) ?? 0;\n    }\n    return this.filteredIssues.size;\n  }\n\n  numberOfAllStoredIssues(): number {\n    return this.allIssues.size;\n  }\n\n  private issueFilter(issue: Issue): boolean {\n    return this.showThirdPartyIssuesSetting?.get() || !issue.isCausedByThirdParty();\n  }\n\n  private updateFilteredIssues(): void {\n    this.filteredIssues.clear();\n    this.issueCounts.clear();\n    this.issuesById.clear();\n    for (const [key, issue] of this.allIssues) {\n      if (this.issueFilter(issue)) {\n        this.filteredIssues.set(key, issue);\n        this.issueCounts.set(issue.getKind(), 1 + (this.issueCounts.get(issue.getKind()) ?? 0));\n        const issueId = issue.getIssueId();\n        if (issueId) {\n          this.issuesById.set(issueId, issue);\n        }\n      }\n    }\n\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n\n  getIssueById(id: string): Issue|undefined {\n    return this.issuesById.get(id);\n  }\n}\n\nexport interface IssueAddedEvent {\n  issuesModel: SDK.IssuesModel.IssuesModel;\n  issue: Issue;\n}\n\nexport type EventTypes = {\n  [Events.IssuesCountUpdated]: void,\n  [Events.FullUpdateRequired]: void,\n  [Events.IssueAdded]: IssueAddedEvent,\n};\n\n// @ts-ignore\nglobalThis.addIssueForTest = (issue: Protocol.Audits.InspectorIssue): void => {\n  const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n  const issuesModel = mainTarget?.model(SDK.IssuesModel.IssuesModel);\n  issuesModel?.issueAdded({issue});\n};\n"]}