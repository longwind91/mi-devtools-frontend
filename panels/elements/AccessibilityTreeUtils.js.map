{"version":3,"file":"AccessibilityTreeUtils.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/AccessibilityTreeUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,KAAK,kBAAkB,MAAM,4BAA4B,CAAC;AACjE,OAAO,KAAK,OAAO,MAAM,+BAA+B,CAAC;AAKzD,MAAM,UAAU,mBAAmB,CAAC,OAAiD;IACnF,MAAM,YAAY,GAAG,OAAO,CAAC;IAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE;QAC1B,OAAO;YACL,YAAY;YACZ,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE;SACjB,CAAC;KACH;IAED,OAAO;QACL,YAAY;QACZ,QAAQ,EAAE,KAAK,IAA0B,EAAE;YACzC,IAAI,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;gBACvD,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACrF;YACD,yFAAyF;YACzF,yFAAyF;YACzF,yFAAyF;YACzF,MAAM,OAAO,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnE,IAAI,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;gBACvD,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;aACvF;YAED,MAAM,gBAAgB,GAAiB,EAAE,CAAC;YAE1C,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE,EAAE;gBACtC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC;QACD,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE;KACjB,CAAC;AACJ,CAAC;AAID,MAAM,UAAU,yBAAyB,CAAC,IAAgB;IACxD,MAAM,GAAG,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,UAAU,CAAC;IACtF,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;IAClC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE,CAAC;IACzC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE,CAAC;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAClC,OAAO,OAAO,CAAC,IAAI,CAAA,IAAI,GAAG,UAAU,EAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAS,MAAM,GAAG,GAAG,CAAC;AAChF,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as ElementsComponents from './components/components.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\n\nexport type AXTreeNodeData = SDK.AccessibilityModel.AccessibilityNode;\nexport type AXTreeNode = TreeOutline.TreeOutlineUtils.TreeNode<AXTreeNodeData>;\n\nexport function sdkNodeToAXTreeNode(sdkNode: SDK.AccessibilityModel.AccessibilityNode): AXTreeNode {\n  const treeNodeData = sdkNode;\n  if (!sdkNode.numChildren()) {\n    return {\n      treeNodeData,\n      id: sdkNode.id(),\n    };\n  }\n\n  return {\n    treeNodeData,\n    children: async(): Promise<AXTreeNode[]> => {\n      if (sdkNode.numChildren() === sdkNode.children().length) {\n        return Promise.resolve(sdkNode.children().map(child => sdkNodeToAXTreeNode(child)));\n      }\n      // numChildren returns the number of children that this node has, whereas node.children()\n      // returns only children that have been loaded. If these two don't match, that means that\n      // there are backend children that need to be loaded into the model, so request them now.\n      await sdkNode.accessibilityModel().requestAXChildren(sdkNode.id());\n\n      if (sdkNode.numChildren() !== sdkNode.children().length) {\n        throw new Error('Once loaded, number of children and length of children must match.');\n      }\n\n      const treeNodeChildren: AXTreeNode[] = [];\n\n      for (const child of sdkNode.children()) {\n        treeNodeChildren.push(sdkNodeToAXTreeNode(child));\n      }\n\n      return Promise.resolve(treeNodeChildren);\n    },\n    id: sdkNode.id(),\n  };\n}\n\ntype Data = ElementsComponents.AccessibilityTreeNode.AccessibilityTreeNodeData;\n\nexport function accessibilityNodeRenderer(node: AXTreeNode): LitHtml.TemplateResult {\n  const tag = ElementsComponents.AccessibilityTreeNode.AccessibilityTreeNode.litTagName;\n  const sdkNode = node.treeNodeData;\n  const name = sdkNode.name()?.value || '';\n  const role = sdkNode.role()?.value || '';\n  const ignored = sdkNode.ignored();\n  return LitHtml.html`<${tag} .data=${{name, role, ignored} as Data}></${tag}>`;\n}\n\nexport interface AccessibilityTreeNodeData {\n  ignored: boolean;\n  name: string;\n  role: string;\n}\n"]}